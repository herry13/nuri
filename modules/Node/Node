#!/usr/bin/env python

import sys
import json
import os
import hashlib
import io
from subprocess import call


###############
#
# Method for generating current state
#
###############
def get_state(model):
	state = {}
	for key in model:
		if key[0] != '_':
			state[key] = model[key]
	### dump current state
	print json.dumps(state)


###############
#
# Function to redirect procedure execution request by
# calling target function
#
###############
def execute(procedure, parameters, model):
	status = 'failed'
	description = 'invalid action'
	print json.dumps({'status': status, 'description': description})


###############
#
# Main logic for handling any request
#
###############
if len(sys.argv) <= 1:
	### invalid request
	print '{"status":"error","description":"invalid command line argument"}'
	exit(1)
else:
	### parse request data in JSON
	data = json.loads(sys.argv[1])

	if 'command' in data:
		try:
			if data['command'] == 'state' and 'model' in data:
				### request for current state
				get_state(data['model'])

			elif data['command'] == 'execute' and 'procedure' in data and 'parameters' in data and 'model' in data:
				### request for executing a procedure
				execute(data['action'], data['parameters'], data['model'])

			else:
				### invalid request
				print '{"status":"error","description":"invalid command"}'
				exit(1)

		except Exception, e:
			### dump exception
			print json.dumps({'status':'error','description': str(e)})

	else:
		### invalid request
		print '{"status":"error","description":"no command"}'
		exit(1)

exit(0)
