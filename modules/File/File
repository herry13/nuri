#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import os
import hashlib
from pwd import getpwuid

###############
#
# Method for generating current state
#
###############
def get_state(model):
	state = {}
	state['path'] = model['path']
	state['exists'] = os.path.exists(model['path'])

	if os.path.isfile(model['path']):
		state['type'] = 'file'
	elif os.path.isdir(model['path']):
		state['type'] = 'directory'
	elif os.path.islink(model['path']):
		state['type'] = 'link'
	else:
		state['type'] = ''

	if state['type'] == 'file':
		md5 = hashlib.md5()
		with open(model['path'], 'rb') as f:
			while True:
				data = f.read(8192)
				if not data:
					break
				md5.update(data)
		state['content'] = md5.hexdigest()
	else:
		state['content'] = ''

	if state['exists']:
		status = os.stat(model['path'])
		state['user'] = getpwuid(status.st_uid).pw_name
		state['uid'] = status.st_uid
		state['permission'] = status.st_mode
	else:
		state['user'] = state['uid'] = state['permission'] = ''

	### dump current state
	print json.dumps({'status': 'ok', 'state': state})


###############
#
# Function to redirect procedure execution request by
# calling target function
#
###############
def execute(procedure, parameters, model):
	status = 'failed'
	description = 'invalid action'
	print json.dumps({'status': status, 'description': description})


###############
#
# Main logic for handling any request
#
###############
if len(sys.argv) <= 1:
	### invalid request
	print '{"status":"error","description":"invalid command line argument"}'
	exit(1)
else:
	### parse request data in JSON
	data = json.loads(sys.argv[1])

	if 'request' in data:
		try:
			if data['request'] == 'state' and 'model' in data:
				### request for current state
				get_state(data['model'])

			elif data['request'] == 'execute' and 'action' in data and 'parameters' in data and 'model' in data:
				### request for executing a procedure
				execute(data['action'], data['parameters'], data['model'])

			else:
				### invalid request
				print '{"status":"error","description":"invalid command"}'
				exit(1)

		except Exception, e:
			### dump exception
			print json.dumps({'status':'error','description': str(e)})

	else:
		### invalid request
		print '{"status":"error","description":"no command"}'
		exit(1)

exit(0)
