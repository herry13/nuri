#!/usr/bin/env ruby

libdir = File.expand_path(File.dirname(__FILE__)) + '/../lib'
require "#{libdir}/nuri"

opts = Trollop::options do
	version "Nuri 0.4.0 (c) 2013 Herry"
	banner <<-EOS
Usage: nuri [options]
where [options] are:
EOS

	opt :model_file, "Model of configuration file.", :default => ''
	opt :state, "Print the current state of the system in JSON based on given model file."
	opt :plan, "Print the plan that could bring the system to the desired state as defined in model file."
	opt :execute, "Execute a plan in given file. Note: model file should be specified.", :default => ''
	opt :apply, "Generate and execute a plan that could bring the system to the desired state."
	opt :push_modules, "Automatically push an unavailable module to target agent."
	opt :human, "Use human readable format."
	opt :pretty, "Use pretty JSON format."
end

def plan_to_human(plan)
	def parallel(plan)
		return plan
	end
	
	def sequential(plan)
		plan = plan['workflow']
		p = 'Plan:'.yellow
		plan.each_index { |i| p += "\n#{i+1}. #{plan[i]['name']} #{plan[i]['parameters']}" }
		(plan.length > 0 ? p : 'The system is at the goal state.'.green)
	end
	return sequential plan if plan['type'] == 'sequential'
	parallel plan
end

if opts[:state]
	fail "Model file is not specified! Use \"-h\" option for more details." if opts[:model_file].length <= 0

	master = Nuri::Master.new
	master.set_model_file(opts)
	state = master.get_state(opts)
	#Nuri::Console.print_state({:state => state}) if opts[:human]
	state.accept(Sfp::Visitor::PrettyStateGenerator.new)
	#puts JSON.pretty_generate(state) if opts[:pretty]
	puts (opts[:pretty] or opts[:human] ? JSON.pretty_generate(state) : JSON.generate(state))

elsif opts[:plan]
	fail "Model file is not specified! Use \"-h\" option for more details." if opts[:model_file].length <= 0

	master = Nuri::Master.new
	master.set_model_file(opts)
	plan = master.get_plan(opts)
	if plan['workflow'].nil?
		puts "Plan: ".yellow + "\nno solution!".red
	elsif opts[:human]
		puts plan_to_human(plan)
	else
		puts (opts[:pretty] ? JSON.pretty_generate(plan) : JSON.generate(plan))
	end

elsif opts[:execute].length > 0
	fail "Model file is not specified! Use \"-h\" option for more details." if opts[:model_file].length <= 0

	master = Nuri::Master.new
	master.set_model_file(opts)
	puts (master.execute_plan(opts) ? "Execution success!".green : "Execution failed!".red)

elsif opts[:apply]
	fail "Model file is not specified! Use \"-h\" option for more details." if opts[:model_file].length <= 0

	master = Nuri::Master.new
	master.set_model_file(opts)
	plan = master.get_plan(opts)
	if plan['workflow'].nil?
		puts "No solution!".red
	else
		if opts[:human]
			puts plan_to_human(plan)
		else
			puts (opts[:pretty] ? JSON.pretty_generate(plan) : JSON.generate(plan))
		end
		if opts[:apply]
			puts 'Executing the plan...'.yellow
			opts[:apply] = plan
			puts (master.execute_plan(opts) ? "Execution success!".green : "Execution failed!".red)
		end
	end

else
	Trollop::help
end
