#!/usr/bin/env ruby

require "json"
require "net/http"

protocol = "https"
host = "nurilabs.com"
port = 443
path = "/api/v1/planner"

if ARGV.length < 2 or ARGV[0] == "-h"
  puts <<-eos
Usage: nuri <initial-file> <goal-file> [included-files ...]
       nuri -i <problem-identifier>\n
eos
elsif ARGV.length == 2 and (ARGV[0] == "-i" or ARGV[0] == "--identifier")
  uri = URI.parse "#{protocol}://#{host}:#{port}#{path}/#{ARGV[1]}"
  http = Net::HTTP.new uri.host, uri.port
  http.use_ssl = (protocol == "https")
  request = Net::HTTP::Get.new uri.request_uri
  response = http.request request
  case response.code
  when "400", "405"
    STDERR.puts "Error: invalid problem identifier."
  when "404"
    STDERR.puts "The solution plan was not found."
  when "202"
    puts "The planner has not finished."
  when "200"
    begin
      reply = JSON.parse response.body
      if reply['plan'].nil?
          puts reply['message']
      else
          puts JSON.pretty_generate reply["plan"]
      end
    rescue
      puts "Error: invalid server's response."
    end
  else
    puts "Internal server error."
  end
else
  data = {
    "type" => "nuri",
    "initial" => File.read(ARGV.shift),
    "goal" => File.read(ARGV.shift)
  }
  ARGV.each { |file|
    next if file == "type" or File.extname(file) != ".nuri"
    data[File.basename(file, ".*")] = File.read(file)
  }
  uri = URI.parse "#{protocol}://#{host}:#{port}#{path}"
  http = Net::HTTP.new uri.host, uri.port
  http.use_ssl = (protocol == "https")
  request = Net::HTTP::Post.new uri.request_uri
  request.body = data.to_json
  request.content_type = "application/json"
  response = http.request request
  if response.code == '201'
    begin
      reply = JSON.parse response.body
      puts "Problem has been created with identifier: #{reply["problem-id"]}"
    rescue
      puts "Error: invalid response #{response.body}"
    end
  else
    begin
      reply = JSON.parse response.body
      puts "#{reply["code"]} #{reply["message"]}"
    rescue
      puts "error #{response.code}: #{response.message}"
    end
  end
end
